<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:Firma.ViewModels"
                    xmlns:vw="clr-namespace:Firma.Views"
                    >

    <!--here we connect view with viewmodels for tabs-->
   
    <DataTemplate DataType="{x:Type vm:UserPanelViewModel}">
        <vw:UserPanelView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:ProductsViewModel}">
        <vw:ProductsView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NewInvoiceViewModel}">
        <vw:NewInvoiceView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:AllInvoicesViewModel}">
        <vw:AllInvoicesView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:NewCustomerViewModel}">
        <vw:NewCustomerView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NewProductViewModel}">
        <vw:NewProductView/>
    </DataTemplate>


	<Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
		<Setter Property="HeaderTemplate">
			<Setter.Value>
				<DataTemplate>
					<!-- Tu możesz dostosować wygląd nagłówka -->
					<TextBlock Text="{Binding}" FontWeight="Bold" Foreground="White" Background="Black" Padding="5"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<!-- Ten szablon zapewnia, że zawartość HeaderedContentControl wypełnia dostępną przestrzeń wertykalną -->
				<ControlTemplate TargetType="{x:Type HeaderedContentControl}">
					<DockPanel>
						<ContentPresenter
                            DockPanel.Dock="Top"
                            ContentSource="Header"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                        />
						<ContentPresenter
                            ContentSource="Content"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                        />
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MainToolBarStyle" TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="YellowGreen"/>
	</Style>

	<Style x:Key="MainGridStyle" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="YellowGreen"/>
	</Style>
	
	<Style x:Key="RoundButtonStyle" TargetType="Button">
		<Setter Property="Background" Value="Black" />
		<Setter Property="Foreground" Value="White" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Padding" Value="10" />
		<Setter Property="Margin" Value="5" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Width" Value="50" />
		<Setter Property="Height" Value="50" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Grid>
						<Ellipse Fill="{TemplateBinding Background}" />
						<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>





	<Style x:Key="ButtonStyle" TargetType="Button">
		<Setter Property="Background" Value="Black"/>
		<Setter Property="Foreground" Value="White"/>
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="Padding" Value="10,5"/>
		<Setter Property="Margin" Value="5"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="5">
						<ContentPresenter HorizontalAlignment="Center"
                                            VerticalAlignment="Center"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	

    <!--
  This style ensures that the borders in the main window are consistent.
  -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--
  This template explains how to render the list of commands on the left
  side in the main window (the 'Control Panel' area).
  -->
    <DataTemplate x:Key="CommandsTemplate">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="6,2">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Button Content="{Binding DisplayName}" Command="{Binding Path=Command}" Margin="6" Padding="5" Background="LightBlue" BorderThickness="0"/>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel Width="120">
            <Button 
        Command="{Binding Path=CloseCommand}"
        Content="X"
        Cursor="Hand"
        DockPanel.Dock="Right"
        Focusable="False"
        FontFamily="Courier" 
        FontSize="9"
        FontWeight="Bold"  
        Margin="0,1,0,0"
        Padding="0"
        VerticalContentAlignment="Bottom"
        Width="16" Height="16" 
        />
            <ContentPresenter 
        Content="{Binding Path=DisplayName}" 
        VerticalAlignment="Center" 
        />
        </DockPanel>
    </DataTemplate>

    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
      IsSynchronizedWithCurrentItem="True" 
      ItemsSource="{Binding}" 
      ItemTemplate="{StaticResource ClosableTabItemTemplate}"
      Margin="4"
      />
    </DataTemplate>


</ResourceDictionary>